@page "/project/{projectId:int}"
@using GLPortal.Core.Enums
@using GLPortal.Core.Models
@using Microsoft.AspNetCore.WebUtilities
@inject IProjectService ProjectService
@inject IJSRuntime JS
@inject NavigationManager Navigation

<MudContainer>
    <MudText Typo="Typo.h4">@ProjectInfo?.Name</MudText>
    <ProjectGitRef Typo="Typo.subtitle1" Project="@ProjectInfo" />

    <MudPaper Elevation="2" Class="pa-4 mb-4">
        <MudText Typo="Typo.h6">📌 Issue</MudText>
        <MudText>Open issues: @ProjectInfo?.OpenIssues</MudText>
        <MudText>Opened in last month: @ProjectInfo?.OpenLastMonth</MudText>
    </MudPaper>
</MudContainer>

<MudPaper Class="pa-3">
    <MudToolBar>
        <MudText Typo="Typo.h6">Issues</MudText>
        <MudSpacer />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ToggleFilters">
            <MudIcon Icon="@Icons.Material.Filled.FilterList" /> Filters
        </MudButton>
        <MudButton StartIcon="@Icons.Material.Filled.ImportExport" Variant="Variant.Filled" Color="Color.Primary" OnClick="ExportToExcel">
            Export
        </MudButton>
    </MudToolBar>
    @if (ShowFilters)
    {
        <MudContainer>

            <MudTextField @bind-Value="_parameters.Search" Placeholder="Search by text" Class="mb-2" />
            <MudSelect @bind-Value="_parameters.State" Clearable="true" Placeholder="State" Class="mb-2">
                <MudSelectItem Value="@((IssueState?)IssueState.Opened)">Opened</MudSelectItem>
                <MudSelectItem Value="@((IssueState?)IssueState.Closed)">Closed</MudSelectItem>
            </MudSelect>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ApplyFilters">Apply</MudButton>
        </MudContainer>
    }
</MudPaper>

<MudTable ServerData="ServerReload" Dense="true" Hover="true" @ref="MainTable" HorizontalScrollbar="true">
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="created_at" T="IssueDTO">Id</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="created_at" T="IssueDTO">Created At</MudTableSortLabel></MudTh>
        <MudTh>State</MudTh>
        <MudTh>Title</MudTh>
        <MudTh>Customer</MudTh>
        <MudTh><MudTableSortLabel SortLabel="label_priority" T="IssueDTO">Priority</MudTableSortLabel></MudTh>
        <MudTh>Assignee</MudTh>
        <MudTh>Milestone</MudTh>
        <MudTh>Labels</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">
            <IssueGitRef Issue="@context" Typo="Typo.body1" />
        </MudTd>
        <MudTd DataLabel="Created At">@context.CreatedAt</MudTd>
        <MudTd DataLabel="State">@context.GitLabState</MudTd>
        <MudTd DataLabel="Title">@context.Title</MudTd>
        <MudTd DataLabel="Customer">@context.CustomersAsString</MudTd>
        <MudTd DataLabel="Priority">@context.Priority</MudTd>
        <MudTd DataLabel="Assignee">@context.AssigneesAsString</MudTd>
        <MudTd DataLabel="Milestone">@context.Milestone</MudTd>
        <MudTd DataLabel="Labels">@context.Labels</MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    [Parameter] public int ProjectId { get; set; }
    private ProjectSummaryDTO? ProjectInfo;
    private MudTable<IssueDTO> MainTable = default!;

    private IssueQueryParameters _parameters = default!;
    private bool ShowFilters = false;

    protected override async Task OnParametersSetAsync()
    {
        var projects = await ProjectService.GetProjectsAsync();
        ProjectInfo = projects.FirstOrDefault(p => p.Id == ProjectId);
        _parameters = new IssueQueryParameters(ProjectId)
        {
            OrderBy = "created_at",
            Sort = "desc",
        };

        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        ShowFilters = false;
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("search", out var search))
        {
            _parameters.Search = search;
            ShowFilters = true;
        }
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("labels", out var labels))
        {
            _parameters.Labels = labels;
            ShowFilters = true;
        }
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("state", out var state) && Enum.TryParse<IssueState>(state, true, out var issueState))
        {
            _parameters.State = issueState;
            ShowFilters = true;
        }
        if (MainTable is not null)
        {
            MainTable.ReloadServerData();
        }
    }

    private async Task<TableData<IssueDTO>> ServerReload(TableState state, CancellationToken token)
    {
        _parameters.OrderBy = state.SortLabel;
        _parameters.Sort = state.SortDirection == SortDirection.Ascending ? "asc" : "desc";
        _parameters.PerPage = state.PageSize;
        _parameters.Page = state.Page + 1;

        var issues = await ProjectService.GetIssues(_parameters);

        return new TableData<IssueDTO>
            {
                TotalItems = issues.TotalCount,
                Items = issues
            };
    }

    private void ToggleFilters()
    {
        ShowFilters = !ShowFilters;
        StateHasChanged();
    }

    private async Task ApplyFilters() {
        var queryString = _parameters.ToString();
        var url = $"/project/{ProjectId}?{queryString}";
        Navigation.NavigateTo(url, forceLoad: true);
    }

    void ExportToExcel()
    {

        var queryString = _parameters.ToString();

        var url = $"/api/issues/toExcel?projectId={ProjectId}&{queryString}";
        JS.InvokeVoidAsync("open", url, "_blank");
    }
}
